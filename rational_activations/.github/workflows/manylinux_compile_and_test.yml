# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
#         python -m pytest --ignore=rational/mxnet/tests --ignore=rational/keras/tests/ -k rational/torch/tests/
name: Python package

on:
  push:
    branches: [ xys ]

jobs:
  manylinux_compilation:
    name: Compile all manylinux wheels
    runs-on: GPU4
    steps:
    - uses: actions/checkout@v2
    - name: Current dir
      run: |
        pwd
        ls -l
    - run: nvidia-smi
    - name: Install wheels
      run: |
        echo Pulling master branch and running manylinux scripts, this will take some time...
        docker exec rat_manylinux bash -c 'cd rational_activations && git pull ci_repo master && ./pypi_build_scripts/make_manylinux.sh && ls wheelhouse'
        echo Printing wheelhouse files...
        docker exec rat_manylinux bash -c 'cd rational_activations && ls wheelhouse && ls wheelhouse/cuda-10.2/ && ls wheelhouse/cuda-10.1/'

  test_wheels:
    name: Run tests for Python, Cuda =
    needs: manylinux_compilation
    runs-on: GPU4
    strategy:
      matrix:
        python-version: ['3.6'] #, '3.7', '3.8']
        cuda-version: ['10.2']
    steps:
    - uses: actions/checkout@v2
    - name: Run GPU tests CUDA=${{ matrix.cuda-version }} & Python${{ matrix.python-version }}
      run: |
        cat <<EOF | docker exec rat_manylinux bash
        cd rational_activations
        pip uninstall rational_activations torch mxnet-cu102 tensorflow-gpu
        export CUDA_HOME=/usr/local/cuda-${{ matrix.cuda-version }}
        export PATH=/usr/local/cuda-${{ matrix.cuda-version }}/bin:$$PATH
        python${{ matrix.python-version }} -m pip install mxnet-cu102 torch==1.7.1 tensorflow-gpu
        python${{ matrix.python-version }} -m pip install wheelhouse/cuda-${{ matrix.cuda-version }}/rational_activations-0.1.0-cp36-cp36-manylinux2014_x86_64.whl
        python${{ matrix.python-version }} -c "import sys, torch; print('Python, CUDA version:', sys.version, torch.version.cuda) && nvcc -V
        python${{ matrix.python-version }} -m pytest
        EOF

